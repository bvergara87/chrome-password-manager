// Generated by IcedCoffeeScript 1.7.1-f
(function() {
  var fetchFormFields, getUrl, iced, initBindings, isPlausibleLoginPage, main, sendFormFields, sieveFormFields, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  sendFormFields = function(form_fields, subdomain) {
    return chrome.runtime.sendMessage({
      method: "put",
      form_fields: JSON.stringify(form_fields),
      subdomain: subdomain
    });
  };

  fetchFormFields = function(subdomain, defer_cb) {
    return chrome.runtime.sendMessage({
      method: "get",
      subdomain: subdomain
    }, function(resp) {
      return defer_cb(JSON.parse(resp.form_fields));
    });
  };


  /*
  Returns an associative array that maps the name of each form field
   */

  sieveFormFields = function(form_obj) {
    var arr, field, _i, _len, _ref;
    arr = {};
    _ref = $(form_obj).find("input");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      field = _ref[_i];
      if ($(field).css("display", "none") || $(field).css("visibility", "hidden")) {
        continue;
      }
      if ($(field).attr("type") === "hidden") {
        continue;
      }
      if (($(field).attr("name") != null) && $(field).attr("name") !== "") {
        arr[$(field).attr("name")] = $(field).val();
      }
    }
    return arr;
  };

  getUrl = function() {
    return location.host + location.pathname;
  };

  isPlausibleLoginPage = function() {
    var all_forms, f, is_login_page, _i, _len;
    all_forms = $("form");
    is_login_page = false;
    for (_i = 0, _len = all_forms.length; _i < _len; _i++) {
      f = all_forms[_i];
      if ($(f).find("input[type=password]").length === 1) {
        is_login_page = true;
      }
    }
    return is_login_page;
  };

  initBindings = function() {
    $("form").on("submit", function(e) {
      var form_fields, url;
      if (isPlausibleLoginPage()) {
        form_fields = sieveFormFields(this);
        url = getUrl();
        return sendFormFields(form_fields, url);
      }
    });
    return $(document).ready(function() {
      var k, plausible_form_fields, url, v, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (isPlausibleLoginPage()) {
        url = getUrl();
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/nubela/Workspace/chrome-password-manager/src/contentscript.coffee"
            });
            fetchFormFields(url, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return plausible_form_fields = arguments[0];
                };
              })(),
              lineno: 53
            }));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            console.log(plausible_form_fields);
            if (typeof plausible_form_fields !== "undefined" && plausible_form_fields !== null) {
              for (k in plausible_form_fields) {
                v = plausible_form_fields[k];
                $("input[name=" + k + "]").val(v);
              }
            }
            return __iced_k();
          };
        })(this));
      } else {
        return __iced_k();
      }
    });
  };

  main = function() {
    return initBindings();
  };

  main();

}).call(this);
